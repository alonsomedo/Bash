# ------------------------------------------------
# PRINCIPAL LINUX COMMANDS
# ------------------------------------------------

# List file and folders 
ls [path]

# Copy files or folders 
# r: recursive
# When we copy a file, the copied file get as owner the user that executes the command.
cp -r [origin-path] [destination-path]

# Create a folder
mkdir [folder-name]

# Move folder or files
# r: recursive
mv -r [folder/file path] [destination-path]

# Delete folder or file
# r: recursive | f: force
rm -rf [folder/file name]

# Create a file
# touch is used to create empty files
touch [file_name]

# See the text inside a file
cat [file-name]

# Overwrite in a text file
echo "text" > [file-name]

# Append in a text file
echo "text" >> [file-name]

# Commands about disk usage
# df (disk free) brings information about system partitions. 
# du (disk usage) brings information about the usage disk of the selected path
# h: shows in kb, mb, gb | s: avoid recursiviness in a directory
df 
df -sh [path]
du -sh [path]

# Links
# ln creates a strong link by default using -s we create a soft link 
# a strong link points information to the disk, only works for files
# a soft link points to the path
ln [file] [mapping_link]
ln -s [file] [mapping_link] 

# Special characters
asterisk symbol (*) is equivalent to any sequence of character in the name of an element
interrogation symbol (?) is equivalent just to one character

# -------------------------------------------------
# PERMISSIONS 
# -------------------------------------------------

# Enter as a root user 
sudo su
sudo -i

# Users always belongs to a group, also they can be part of different groups
# Group the user belongs
group
id [username]
# To identify myself
whoami

# Create a user, by default also creates a group with the same name of the user.
adduser [username]

# Create a group
addgroup [group-name]

# Change the principal group of the user
usermod -g [group-name]

# Change propietary of a file, you need to be root
# chown means change owner 
chown [new-username]:[new-group-name]

# Change password, root can change password of any user
passwd [username]

# Permissions on Files
# --------------------
# r: read permission
# w: write permission
# x: execute permission

# -rw-rw-rw- fie-name
# The first 3 spaces indicates user permissions.
# The second ones indicates group permissions.
# The last ones indicates others permissions.
# The order is always r, w, x

# Permissions on Directories
# --------------------------
# d: directory
# r: list content
# w: modify content (delete included)
# x: access to content

# Given Permissions
-------------------
# u: permissions only for users
# g: permissions only for groups
# o: permissions for others
# a: By default change permissions for all (u, g, o)

# Provide permission
--------------------
chmod +r [file-name]
chmod u+r [file-name]
chmod u+r, g+x [file-name]
chmod u=w, o=rx [file-name]

# Using binary numbers
rw- r-- --- 110 100 000
in octal 640 
chmod 640 [file-name]


# Remove Permissions
--------------------
chmod -r Permissions

# -------------------------------------------------
# LINUX COMMANDS 
# -------------------------------------------------

# Find files inside a folder that follows a pattern
# [options]
# type d: directory || f: file
# size +/- (k kilobytes, M megabytes , G gigabytes)
# perm [number]
find [path] [options] -type d 
find . -iname "carta*" -type d -size +1k

# searching by permission on files
find . -perm 400 

# -exec allows to define a command to be executed for each result of the searching list.
# {} is replaced with the name of the files and ; indicates the end of the command
find /etc/ -iname '*.conf' -size 1M -exec cp '{}' /home/copias/ ';'

# -------------------------------------------------
# PACKAGE MANAGER COMMANDS 
# -------------------------------------------------
apt: use repositories where .deb packages are located 
update: update information about the packages located in the repository
install: install one or many packages
remove: uninstall a package
updgrade: update all our installed packages
dist-updgrade: update the version to the last one we have in the repository
clean: delete .deb packages stored in disk

# -------------------------------------------------
# MANAGING TEXT
# -------------------------------------------------

# --------
# echo
# --------
# man echo to see documentation
# echo: show the text it receives
# -e: interpreted special characters after \ (backslash)
# echo with double quotes interprets enviroment variables, though with single quotes enviroment variable is not interpreted

# --------
# cat
# --------
# cat: allows you to concatenate text files, also used to display text file content
# -n: show the line number in the file
cat -n 10 [file-name]

# --------
# more
# --------
# more: show the text part by part. Space used to move screen. Intro to move to next line. With q exit and with h for help.
more [file-name]

# --------
# less
# --------
# less: do the same as more with more funtionalities, is optimized for big text files
less [file-name]

# --------
# head
# --------
# head: shows the first lines of the text file, by default 10.
# -n: parameter used to set the number of lines to show.
head -n 10 [file-name]

# --------
# tail
# --------
# tail: shows the last lines of the text file, by default 10.
# -n: parameter used to set the number of lines to show.
tail -n 10 [file-name]

# --------
# cut
# --------
# cut: shows only a part of each line. vertical cut
# -c: only select characters that we indicate
# -d: delimiter character, then we need to specify the column
# -f: select the column you want
# cut -c 1,5 /etc/passwd
# cut -c 1-5,6-10 /etc/passwd
# cut -d "," -f 2 RENTA_ALTA_20220601.csv

# --------
# grep
# --------
# grep: show the lines that match the pattern
# -v: this prints out all the lines that do not matches the pattern
# -l: displays list of a filenames only.
# -w: match whole word
# -n: display the matched lines and their line numbers.
# -i: ignores, case for matching
# -c: this prints only a count of the lines that match a pattern
# -r: search recursively  
grep [word] [options] [path]
grep root -l /var/log/*.log
grep ACEPTA -w *

# --------
# sort
# --------
# sort: order rows in alphabetic
# r: reverse mode
# n: -n Option: To sort a file numerically used –n option. -n option is also predefined in Unix as the above options are. This option is used to sort the file with numeric data present inside. 
sort [options] [file]

# --------
# uniq
# --------
# uniq: print only unique lines without duplicates, that are next to each other
# -i: ignores case
# -d: It only prints the repeated lines and not the lines which aren’t repeated.
# -c: It tells how many times a line was repeated by displaying a number as a prefix with the line.
uniq [options] [file]
uniq -i nombres.txt

# --------
# wc
# --------
# wc: word count 
# -l: only lines 
# -w: only words
# -m: only characters
wc -l [file] 

# --------
# rev
# --------
# rev: command in Linux is used to reverse the lines characterwise. This utility basically reverses the order of the characters in each line by copying the specified files to the standard output. 


# ----------------------------------
# Redirects: input, output and error
# ----------------------------------
# >   : overwrite file with stdout
# >>  : append to file with stdout 
# 2>  : overwrite error msg stderr
# 2>> : append error msg stderr
# &>  : overwrite file with stdout and stderr
# &>>  : overwrite file with stdout and stderr


# ----------------------------------
# Pipes
# ----------------------------------
# You can concatenate commands 
grep ^a /etc/passwd | cut -d":" -f1 | wc
du -sh /* 2> /dev/null | sort -hr
du -sh /* 2> /dev/null | sort -hr | head -n 1

# --------
# tr
# --------
# tr: is a command line utility for translating or deleting characters. It supports a range of transformations including uppercase to lowercase, squeezing repeating characters, deleting specific characters and basic find and replace.
# -d: deletes the letter
# -s: deletes duplicates
tr [OPTION] SET1 [SET2]
echo casa > fichero.txt
tr ac en < fichero.txt
tr [:lower:] [:upper:] < ficherotr.txt > upper.txt
cat upper.txt | tr -d A
ls -lh . | tr -s " " | cut -d" " -f2

# --------
# sed
# --------
# SED command in UNIX stands for stream editor and it can perform lots of functions on file like searching, find and replace, insertion or deletion. Though most common use of SED command in UNIX is for substitution or for find and replace. By using SED you can edit files even without opening them, which is much quicker way to find and replace something in file, than first opening that file in VI Editor and then changing it.
# SED is a powerful text stream editor. Can do insertion, deletion, search and replace(substitution).
# SED command in unix supports regular expression which allows it perform complex pattern matching.
# -n : avoid display in std
# -e : indicates to execute script
# -f : commands will be taken from a file
# -r : extends regular expressions

sed [-n] [-e'script'] [-f archivo] archivo1 archivo2

# Script Syntax 
# [initial_locationp[, end_location]] instruction [arguments]

# Instruction
# i\: insert before current line
# a\: insert after current line 
# c\: replace current line by the next one specified
# d: delete current line
# p: print current line in standart output
# s/: substitute current line 
# !: apply instruction to not selected lines


sed -e '/cayeron/d' manos.txt
sed -e '5,/manos/d' manos.txt 
sed -e '1i\Hola Alonso\' manos.txt
sed -n -e '2,4p' manos.txt
sed -e '1i\Hola Alonso' -e '1a\Hola Juan' manos.txt
sed -e 's/manos/PIES/' manos.txt